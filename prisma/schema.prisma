// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// User Management
model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  username      String    @unique
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  phone         String?
  gender        String?
  country       String    @default("Ghana")
  image         String?
  bio           String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Profile relationships
  profile       Profile?
  socialMedia   SocialMedia?
  education     Education[]
  workHistory   WorkHistory[]
  projects      Project[]
  skills        UserSkill[]

  // Community relationships
  communities   CommunityMember[]
  ownedCommunities Community[] @relation("CommunityOwner")
  posts         Post[]
  comments      Comment[]
  likes         Like[]

  // Event relationships
  eventsAttended EventAttendee[]
  eventsCreated  Event[] @relation("EventOrganizer")
  certificates   Certificate[]

  // Hackathon relationships
  teamMemberships TeamMember[]
  ownedTeams      Team[] @relation("TeamOwner")
  submissions     ProjectSubmission[] @relation("SubmissionCreator")
  judgedSubmissions ProjectSubmissionScore[] @relation("Judge")

  // Messages
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  
  // Notifications
  notifications    Notification[]

  @@map("users")
}

model Profile {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @unique @map("user_id") @db.Uuid
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  industryRole    String?  @map("industry_role")
  specialization  String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model SocialMedia {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  twitter   String?
  facebook  String?
  instagram String?
  linkedin  String?
  github    String?
  website   String?
  dribble   String?
  medium    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("social_media")
}

model Education {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  level     String
  school    String
  startYear Int      @map("start_year")
  endYear   Int?     @map("end_year")
  degree    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("education")
}

model WorkHistory {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     String
  role        String
  startDate   DateTime  @map("start_date")
  endDate     DateTime? @map("end_date")
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("work_history")
}

model Project {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  url         String?
  screenshots String[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

model Skill {
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @unique
  users     UserSkill[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("skills")
}

model UserSkill {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillId   String   @map("skill_id") @db.Uuid
  skill     Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, skillId])
  @@map("user_skills")
}

// Community (Social)
model Community {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  image       String?
  banner      String?
  isOpen      Boolean  @default(true) @map("is_open")
  ownerId     String   @map("owner_id") @db.Uuid
  owner       User     @relation("CommunityOwner", fields: [ownerId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  members     CommunityMember[]
  posts       Post[]
  events      Event[]

  @@map("communities")
}

model CommunityMember {
  id          String   @id @default(uuid()) @db.Uuid
  communityId String   @map("community_id") @db.Uuid
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id") @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        String   @default("member") // member, admin, moderator
  status      String   @default("active") // active, pending, banned
  joinedAt    DateTime @default(now()) @map("joined_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([communityId, userId])
  @@map("community_members")
}

model Post {
  id          String   @id @default(uuid()) @db.Uuid
  content     String
  image       String?
  userId      String   @map("user_id") @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String?  @map("community_id") @db.Uuid
  community   Community? @relation(fields: [communityId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  comments    Comment[]
  likes       Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  postId    String   @map("post_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  postId    String   @map("post_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([postId, userId])
  @@map("likes")
}

// Events
model Event {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  location    String?
  isVirtual   Boolean  @default(false) @map("is_virtual")
  image       String?
  organizerId String   @map("organizer_id") @db.Uuid
  organizer   User     @relation("EventOrganizer", fields: [organizerId], references: [id])
  communityId String?  @map("community_id") @db.Uuid
  community   Community? @relation(fields: [communityId], references: [id], onDelete: SetNull)
  type        String?  // hackathon, webinar, workshop, etc.
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  attendees   EventAttendee[]
  schedule    EventSchedule[]
  speakers    EventSpeaker[]
  certificates Certificate[]
  hackathon   Hackathon?

  @@map("events")
}

model EventAttendee {
  id        String   @id @default(uuid()) @db.Uuid
  eventId   String   @map("event_id") @db.Uuid
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    String   @default("registered") // registered, attended, cancelled
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([eventId, userId])
  @@map("event_attendees")
}

model EventSchedule {
  id          String   @id @default(uuid()) @db.Uuid
  eventId     String   @map("event_id") @db.Uuid
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  title       String
  description String?
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("event_schedule")
}

model EventSpeaker {
  id        String   @id @default(uuid()) @db.Uuid
  eventId   String   @map("event_id") @db.Uuid
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  name      String
  bio       String?
  image     String?
  role      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("event_speakers")
}

model Certificate {
  id          String   @id @default(uuid()) @db.Uuid
  eventId     String   @map("event_id") @db.Uuid
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id") @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId  String?  @map("template_id") @db.Uuid
  template    CertificateTemplate? @relation(fields: [templateId], references: [id])
  issueDate   DateTime @default(now()) @map("issue_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([eventId, userId])
  @@map("certificates")
}

model CertificateTemplate {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  template    String
  signature   String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  certificates Certificate[]

  @@map("certificate_templates")
}

// Hackathon
model Hackathon {
  id          String   @id @default(uuid()) @db.Uuid
  eventId     String   @unique @map("event_id") @db.Uuid
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  prizes      String?
  rules       String?
  criteria    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  teams       Team[]
  submissions ProjectSubmission[]

  @@map("hackathons")
}

model Team {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  hackathonId String   @map("hackathon_id") @db.Uuid
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  ownerId     String   @map("owner_id") @db.Uuid
  owner       User     @relation("TeamOwner", fields: [ownerId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  members     TeamMember[]
  submissions ProjectSubmission[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(uuid()) @db.Uuid
  teamId    String   @map("team_id") @db.Uuid
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   @default("member") // owner, member
  joinedAt  DateTime @default(now()) @map("joined_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([teamId, userId])
  @@map("team_members")
}

model ProjectSubmission {
  id              String   @id @default(uuid()) @db.Uuid
  name            String
  description     String
  hackathonId     String   @map("hackathon_id") @db.Uuid
  hackathon       Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  teamId          String   @map("team_id") @db.Uuid
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  creatorId       String   @map("creator_id") @db.Uuid
  creator         User     @relation("SubmissionCreator", fields: [creatorId], references: [id])
  repoLink        String   @map("repo_link")
  demoLink        String?  @map("demo_link")
  videoLink       String?  @map("video_link")
  presentationUrl String?  @map("presentation_url")
  toolsUsed       String?  @map("tools_used")
  judgeInstructions String? @map("judge_instructions")
  additionalInfo  String?  @map("additional_info")
  submittedAt     DateTime @default(now()) @map("submitted_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  scores          ProjectSubmissionScore[]

  @@map("project_submissions")
}

model ProjectSubmissionScore {
  id            String   @id @default(uuid()) @db.Uuid
  submissionId  String   @map("submission_id") @db.Uuid
  submission    ProjectSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  judgeId       String   @map("judge_id") @db.Uuid
  judge         User     @relation("Judge", fields: [judgeId], references: [id])
  innovation    Int
  technical     Int
  impact        Int
  presentation  Int
  feedback      String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@unique([submissionId, judgeId])
  @@map("project_submission_scores")
}

// Jobs
model Job {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  company     String
  description String
  location    String?
  isRemote    Boolean  @default(false) @map("is_remote")
  type        String   // full-time, part-time, contract, internship
  isPaid      Boolean  @default(true) @map("is_paid")
  salaryMin   Float?   @map("salary_min")
  salaryMax   Float?   @map("salary_max")
  requirements String?
  externalLink String?  @map("external_link")
  coverImage  String?   @map("cover_image")
  status      String   @default("open") // open, closed, filled
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  applications JobApplication[]
  reviews      JobReview[]

  @@map("jobs")
}

model JobApplication {
  id        String   @id @default(uuid()) @db.Uuid
  jobId     String   @map("job_id") @db.Uuid
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    String   @default("applied") // applied, interviewed, accepted, rejected
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([jobId, userId])
  @@map("job_applications")
}

model JobReview {
  id        String   @id @default(uuid()) @db.Uuid
  jobId     String   @map("job_id") @db.Uuid
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  review    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([jobId, userId])
  @@map("job_reviews")
}

// Messages
model Message {
  id          String   @id @default(uuid()) @db.Uuid
  content     String
  senderId    String   @map("sender_id") @db.Uuid
  sender      User     @relation("MessageSender", fields: [senderId], references: [id])
  receiverId  String   @map("receiver_id") @db.Uuid
  receiver    User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("messages")
}

// Notifications
model Notification {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // like, comment, follow, etc.
  content     String
  isRead      Boolean  @default(false) @map("is_read")
  relatedId   String?  @map("related_id") // ID of the related entity (post, comment, etc.)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}
